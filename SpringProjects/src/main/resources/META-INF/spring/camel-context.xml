<?xml version="1.0" encoding="UTF-8"?>
<!-- Configures the Camel Context-->

<!--spring xml插件-->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/aop  http://www.springframework.org/schema/aop/spring-aop-4.0.xsd">

<!--  Spring AOP开始-->
<!--将通知织入到目标对象中-->
<!--  目标对象-->
<bean name="primaryStudent" class="com.brzt.impl.PrimaryStudent"></bean>
<!--通知对象-->
  <bean name="primaryStudentNotice" class="com.brzt.notice.PrimaryStudentNotice"></bean>
<!--将对象织入到目标对象中-->
  <aop:config>
<!--    配置切入点-->
<!--
通配符，批量配置
()使用无参数匹配
(..)使用任意参数匹配
()使用一个参数匹配
(String,)第一个是String参数，第二个任意
*任何
* com.brzt.impl.PrimaryStudent.add() == public void com.brzt.impl.PrimaryStudent.add()
* com.brzt.impl.PrimaryStudent.*()
* com.brzt.impl.PrimaryStudent.*(..) //带参数的
* com.brzt.impl.*Student.*(..) //带参数的
* com.brzt.impl..*Student.*(..) //带参数的
-->
    <aop:pointcut id="add" expression="execution(* com.brzt.impl.PrimaryStudent.*())"/>
<!--    指定通知-->
    <aop:aspect ref="primaryStudentNotice">
<!--      指定通知并进行切入的点-->
      <aop:after method="getAfter" pointcut-ref="add"></aop:after>
      <aop:before method="getBefore" pointcut-ref="add"></aop:before>
    </aop:aspect>
  </aop:config>
  <aop:aspectj-autoproxy  proxy-target-class="true"/>
  <!--  Spring AOP结束-->

<!--
依赖顺序
  1.类型
    注释在Setter和构造函数上，选择的参数的类型
  2.指定名称
    通过注解 @Qualifier("car")指定bean
    -->

<!--  加载配置文件-->
  <context:property-placeholder location="META-INF/spring/db.properties"></context:property-placeholder>

  <!--
开启注解
扫描包路径下的所有子孙包
-->
  <context:component-scan base-package="com.brzt"></context:component-scan>

  <camelContext xmlns="http://camel.apache.org/schema/spring">
    <!-- here is a sample which processes the input files
         (leaving them in place - see the 'noop' flag)
         then performs content based routing on the message using XPath -->
    <route>
      <from uri="file:src/data?noop=true"/>
      <choice>
        <when>
          <xpath>/person/city = 'London'</xpath>
          <log message="UK message"/>
          <to uri="file:target/messages/uk"/>
        </when>
        <otherwise>
          <log message="Other message"/>
          <to uri="file:target/messages/others"/>
        </otherwise>
      </choice>
    </route>
  </camelContext>

<!--将对象Users交给spring容器管理
bean元素：表示需要spring容器管理获取对象
name:bean名称,不是唯一的，可以使用特殊符号，可以有多个
class:类对应名称
id:和name属性性质一样，是唯一的,并且不可以使用特殊符号
无参数构造方法创建对象
scope:singleton默认值，单列模式，在spring容器中只会创建一个对象
      prototype多列原型，在spring中容器每次创建一个新对象
      session web环境中，对象与session中生命周期一致
      request web环境中，对象与request生命周期一致
      一般情况下使用默认值，在Strus和Spring整合的时候，Strus的bean用多列模式
生命周期：
  init-method初始化：spring对象创建之后
  destroy-method销毁：spring容器关闭的时候关闭容器内所有对象,若调用此方法则必须 context.close();
-->

<!--
注入方式:
  引用类型的注入：
    set方法注入：实体类上有set方法
  值类型的注入：
  构造方法注入:
  p名称注入：本质也是set方法注入
  spel注入：了解
  数组注入:
  List注入:
  Set注入：
  Map注入:
  Properties注入:
  自动注入:
  注解方式：非在配置文件里写

-->
<!--
depends-on="bean名称"，指定的bean在该属性的bean之前创建
-->
  <bean scope="" name="users" class="com.brzt.entity.Users" init-method="" destroy-method="">
<!--    set方式1-->
    <property name="name" value="puhome"></property>
<!--    set方式2-->
    <property name="id">
      <value>1111</value>
    </property>
<!--    值类型注入-->
    <property name="car"  ref="car" ></property>
<!--
构造方法注入
type:参数的类型
index：执行构造函数参数的顺序,从0开始
-->
  <constructor-arg name="name" value="普加"></constructor-arg>
  <constructor-arg name="id" value="222"></constructor-arg>

    <!--    数组注入  -->
<!--    单值-->
<!--<property name="obj">-->
<!--  <array>-->
<!--    <value>a</value>-->
<!--    <value>b</value>-->
<!--  </array>-->
<!--</property>-->
<!--    对象-->
<!--<property name="obj2">-->
<!--  <array>-->
<!--    <ref bean="car"></ref>-->
<!--  </array>-->
<!--</property>-->

<!--List注入-->
<!--<property name="list">-->
<!--  <list>-->
<!--    <value></value>-->
<!--    <ref></ref>-->
<!--  </list>-->
<!--</property>-->

<!--Set注入-->
<!--<property name="set">-->
<!--  <set>-->
<!--    <value></value>-->
<!--    <ref></ref>-->
<!--  </set>-->
<!--</property>-->

<!--map注入    -->
<!--    <property name="map">-->
<!--      <map>-->
<!--        <entry key="" value=""></entry>-->
<!--      </map>-->
<!--    </property>-->

<!--    Properties注入    -->
<!--    <property name="properties">-->
<!--      <props>-->
<!--        <prop key="a">b</prop>-->
<!--      </props>-->
<!--    </property>-->
  </bean>
<!--
lazy-init="true" 用到的时候才加载
在beans上配置后，为全局懒加载
-->
  <bean name="car" class="com.brzt.entity.Car" lazy-init="true">
    <property name="name">
      <value>沃尔沃</value>
    </property>
    <property name="color">
      <value>红色</value>
    </property>
  </bean>


  <!--自动注入-局部，全局在beans标签上-->
<!--
no：默认，不进行自动注入，需要使用value ref等
byName：通过bean的名称进行注入，setter方法
byType：通过bean类型进行注入
constructor：类似byType

-->
<!--<bean autowire="default" name="user2" class="com.brzt.entity.Users"></bean>-->

  <!--  给bean的名称起别名-->
  <alias name="users" alias="usersService"></alias>

<!--静态工厂的创建方式  -->
<bean name="usersfactory" class="com.brzt.factory.UsersFactory" factory-method="createUsers"></bean>


<!--实例工厂的创建方式-->
<bean name="userFactoryTwo" class="com.brzt.factory.UsersFactoryTwo" factory-method="createUsers"></bean>

<!--<bean name="userFactoryTwo"  factory-bean="userFactoryBean" factory-method="createUsers"></bean>
 <bean name="userFactoryBean"  class="com.brzt.factory.UsersFactoryTwo"></bean>-->

  <!--
    Ant-style风格
    ?匹配任何单个字符
    *匹配0或者任意单个数量的字符
    **匹配0或者更多的目录
  -->

  </beans>